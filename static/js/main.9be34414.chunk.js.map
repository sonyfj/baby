{"version":3,"sources":["images/boy.png","images/girl.png","Countdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Countdown","props","state","isClient","timer","distance","Date","this","months","Math","floor","_day","days","_hour","hours","_minute","minutes","_second","seconds","style","padding","fontSize","setState","setInterval","forceUpdate","bind","Component","App","showConfetti","girlPicked","boyPicked","width","height","className","getConfetti","paddingTop","margin","maxWidth","textAlign","noWrap","interval","src","marginLeft","marginTop","marginBottom","display","justifyContent","girl","onClick","visibility","boy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,uQCiD5BC,E,YA7CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAACC,UAAU,GACxB,EAAKC,MAAQ,KAHE,E,sEAQf,IAQIC,EARM,IAAIC,KAAK,uBAOT,IAAIA,KAGd,GAAID,EAAW,IAAME,KAAKL,MAAMC,SAC5B,MAAO,eAGX,IAAIK,EAASC,KAAKC,MAAML,EATXM,QAUTC,EAAOH,KAAKC,MAAOL,EAVVM,OADFE,OAYPC,EAAQL,KAAKC,MAAOL,EAZbQ,MADCE,MAcRC,EAAUP,KAAKC,MAAOL,EAddU,KADEE,KAgBVC,EAAUT,KAAKC,MAAOL,EAhBZY,IADA,KAmBd,OAAO,yBAAKE,MAAO,CAACC,QAAS,OAAQC,SAAU,SAC3C,2CACA,6BAAOb,EAAS,SAAWI,EAAO,SAAWE,EAAQ,QACnDE,EAAU,SAAWE,EAAU,Y,0CAMrCX,KAAKe,SAAS,CAACnB,UAAU,IACzBI,KAAKH,MAAQmB,YAAYhB,KAAKiB,YAAYC,KAAKlB,MAAO,O,6CAGtDA,KAAKH,MAAQ,S,GA3CGsB,aCyFTC,E,YAjFb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX0B,cAAc,EACdC,YAAY,EACZC,WAAW,GALI,E,2EAUjB,OAAO,kBAAC,IAAD,CACHC,MAAO,IACPC,OAAQ,Q,mCAKZzB,KAAKe,SAAS,CACZM,cAAc,EACdC,YAAY,EACZC,WAAW,M,kCAKbvB,KAAKe,SAAS,CACZM,cAAc,EACdC,YAAY,EACZC,WAAW,M,+BAIJ,IAAD,OACR,OACE,yBAAKG,UAAU,OACZ1B,KAAKL,MAAM0B,aAAerB,KAAK2B,cAAe,KAC/C,yBAAKH,MAAM,OAAOZ,MAAO,CAACgB,WAAY,SACpC,yBAAKhB,MAAO,CAACiB,OAAQ,SAAUL,MAAO,UACpC,yBAAKZ,MAAO,CAACkB,SAAU,QAASC,UAAW,WACzC,kBAAC,IAAD,CAAUC,QAAQ,EAAOC,SAAU,KACjC,iGACA,kGAGJ,yBAAKrB,MAAO,CAACgB,WAAY,SACzB,yBAAKM,IAAI,iEACLtB,MAAO,CAACuB,WAAY,QAASX,MAAO,WAExC,yBAAKZ,MAAO,CAACwB,UAAW,SAAUC,aAAa,UAC/C,yBAAKzB,MAAO,CAAC0B,QAAS,OAAQd,MAAO,MAC/Be,eAAgB,kBAChB,6BACE,yBAAKf,MAAM,QAAQU,IAAKM,IAAMC,QAAS,kBAAM,EAAKnB,iBAEpD,6BACE,yBAAKV,MAAO,CAAC8B,WAAY1C,KAAKL,MAAM2B,WAAa,SAAW,WAAYE,MAAM,QAAQU,IAAKS,IAAKF,QAAS,kBAAM,EAAKlB,mBAK1HvB,KAAKL,MAAM4B,UACP,kBAAC,IAAD,CAAUS,QAAQ,EAAOC,SAAU,KACjC,sDACY,KAGhBjC,KAAKL,MAAM2B,WACX,kBAAC,IAAD,CAAUU,QAAQ,EAAOC,SAAU,KACjC,6DACY,KAGdjC,KAAKL,MAAM2B,WAAa,kBAAC,EAAD,MAAgB,Y,GAzEtCH,aCGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9be34414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boy.c3bf8f87.png\";","module.exports = __webpack_public_path__ + \"static/media/girl.953fae91.png\";","import React, { Component } from 'react';\n\nclass Countdown extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {isClient: false};\n        this.timer = null;\n    }\n\n\n    render() {\n        var end = new Date('07/02/2020 10:10 AM');\n        var _second = 1000;\n        var _minute = _second * 60;\n        var _hour = _minute * 60;\n        var _day = _hour * 24;\n        var _month = _day * 30;\n    \n        var now = new Date();\n        var distance = end - now;\n    \n        if (distance < 0 || !this.state.isClient) {\n            return 'Hello World!';\n        }\n    \n        var months = Math.floor(distance / _month);\n        var days = Math.floor((distance % _month) / _day);\n        var hours = Math.floor((distance % _day) / _hour);\n        var minutes = Math.floor((distance % _hour) / _minute);\n        var seconds = Math.floor((distance % _minute) / _second);\n    \n        return <div style={{padding: \"11px\", fontSize: \"11px\"}}>\n            <div>Countdown:</div>\n            <div>{ months + ' Mths ' + days + ' Days ' + hours + ' Hrs '\n            + minutes + ' Mins ' + seconds + ' Secs' }</div>\n        </div>;\n    }\n\n    componentDidMount() {\n        var self = this;\n        this.setState({isClient: true});\n        this.timer = setInterval(this.forceUpdate.bind(this), 1000);\n    }\n    componentWillUnmount() {\n        this.timer = null;\n    }\n}\n\nexport default Countdown;","import React, { Component } from 'react';\nimport './App.css';\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport Confetti from 'react-confetti';\nimport boy from './images/boy.png';\nimport girl from './images/girl.png';\nimport TextLoop from \"react-text-loop\";\nimport Countdown from \"./Countdown\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showConfetti: false,\n      girlPicked: false,\n      boyPicked: false\n    };\n  }\n\n  getConfetti() {\n    return <Confetti\n        width={400}\n        height={1000}\n      />;\n  }\n\n  girlPicked() {\n    this.setState({\n      showConfetti: true,\n      girlPicked: true,\n      boyPicked: false\n    })\n  }\n\n  boyPicked() {\n    this.setState({\n      showConfetti: false,\n      girlPicked: false,\n      boyPicked: true\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        {this.state.showConfetti ? this.getConfetti(): null}\n        <div width=\"100%\" style={{paddingTop: \"20px\"}}>\n          <div style={{margin: \"0 auto\", width: \"300px\"}}>\n            <div style={{maxWidth: \"300px\", textAlign: \"center\"}}> \n              <TextLoop noWrap={false} interval={4000}>\n                <span>Hi! I am Isabel (Izzy). I am going to have a baby sibling soon.</span>\n                <span>Guess if it's a boy or a girl by clicking on one of the babies</span>\n              </TextLoop>\n            </div>\n            <div style={{paddingTop: \"20px\"}}>\n            <img src=\"http://c2.staticflickr.com/2/1596/23948188374_77061251e2_z.jpg\"\n                style={{marginLeft: '-40px', width: \"250px\"}}>\n            </img>\n            <div style={{marginTop: \"-120px\", marginBottom:\"100px\"}}>\n            <div style={{display: \"flex\", width: \"300\",\n                  justifyContent: \"space-between\"}} >\n                  <div>\n                    <img width=\"120px\" src={girl} onClick={() => this.girlPicked()}/>\n                  </div>\n                  <div>\n                    <img style={{visibility: this.state.girlPicked ? \"hidden\" : \"visible\"}} width=\"120px\" src={boy} onClick={() => this.boyPicked()} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            { this.state.boyPicked ? \n                  <TextLoop noWrap={false} interval={4000}>\n                    <span>Sorry!! wrong guess</span>\n                  </TextLoop> : null\n              }\n              {\n                this.state.girlPicked ? \n                <TextLoop noWrap={false} interval={4000}>\n                  <span>Yess!! it's a Baby GIRL!!!</span>\n                </TextLoop> : null\n              }\n              {\n                this.state.girlPicked ? <Countdown /> : null\n              }\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}